openapi: 3.0.3
info:
  title: Minimal Blog API
  version: 0.1.0
  description: OpenAPI schema for Minimal Blog API
paths:
  /accounts/{username}/block/:
    post:
      operationId: accounts_block_create
      summary: Block a user
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - moderation
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    delete:
      operationId: accounts_block_destroy
      summary: Unblock a user
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - moderation
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /accounts/{username}/profile/:
    get:
      operationId: accounts_profile_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /accounts/me/profile/:
    get:
      operationId: accounts_me_profile_retrieve
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    put:
      operationId: accounts_me_profile_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: accounts_me_profile_partial_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /accounts/register/:
    post:
      operationId: accounts_register_create
      summary: Register a new user
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /accounts/token/:
    post:
      operationId: accounts_token_create
      description: Obtain access/refresh tokens with phone and password.
      summary: Login (JWT)
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
            examples:
              LoginRequest:
                value:
                  phone: 09120000000
                  password: Passw0rd!
                summary: Login request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
              examples:
                LoginResponse:
                  value:
                    access: <jwt>
                    refresh: <jwt>
                  summary: Login response
          description: ''
  /accounts/token/refresh/:
    post:
      operationId: accounts_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /comments/{comment_id}/report/:
    post:
      operationId: comments_report_create
      summary: Report a comment
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - moderation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentReport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentReport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentReport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /comments/{post_slug}/:
    get:
      operationId: comments_list
      summary: Create comment
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: post_slug
        schema:
          type: string
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
              examples:
                Created:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 123
                      content: Nice post!
                      is_approved: false
          description: ''
    post:
      operationId: comments_create
      summary: Create comment
      parameters:
      - in: path
        name: post_slug
        schema:
          type: string
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            examples:
              CreateComment:
                value:
                  content: Nice post!
                summary: Create comment
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              examples:
                Created:
                  value:
                    id: 123
                    content: Nice post!
                    is_approved: false
          description: ''
  /posts/:
    get:
      operationId: posts_list
      summary: List published posts (public)
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
    post:
      operationId: posts_create
      summary: Create a post (auth)
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /posts/{slug}/:
    get:
      operationId: posts_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: posts_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: posts_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: posts_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /posts/{slug}/like/:
    post:
      operationId: posts_like_create
      summary: Like/Dislike a post (auth)
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LikeBody'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LikeBody'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /posts/author/{username}/:
    get:
      operationId: posts_author_list
      description: Supports search (title/description) and ordering (created_at/updated_at/comments_count/likes_count).
      summary: List published posts by author username (public)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
        '404':
          description: No response body
  /posts/category/{slug}/:
    get:
      operationId: posts_category_list
      description: Supports search (title/description) and ordering (created_at/updated_at/comments_count/likes_count).
      summary: List posts by category slug (public)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
        '404':
          description: No response body
  /posts/my-posts/:
    get:
      operationId: posts_my_posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        post:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        level:
          type: integer
          readOnly: true
        parent:
          type: integer
          nullable: true
        comment_author:
          type: string
          readOnly: true
      required:
      - comment_author
      - content
      - created_at
      - id
      - level
      - post
      - user
    CommentReport:
      type: object
      properties:
        reason:
          type: string
          maxLength: 200
      required:
      - reason
    GenderEnum:
      enum:
      - male
      - female
      type: string
      description: |-
        * `male` - Male
        * `female` - Female
    LikeBody:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/ValueEnum'
      required:
      - value
    NullEnum:
      enum:
      - null
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
        description:
          type: string
        reading_time:
          type: integer
          maximum: 32767
          minimum: 0
        status:
          $ref: '#/components/schemas/StatusEnum'
        excerpt:
          type: string
          nullable: true
          maxLength: 300
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views_count:
          type: integer
          maximum: 2147483647
          minimum: 0
        categories:
          type: array
          items:
            type: integer
    PatchedProfile:
      type: object
      properties:
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
        description:
          type: string
        reading_time:
          type: integer
          maximum: 32767
          minimum: 0
        status:
          $ref: '#/components/schemas/StatusEnum'
        excerpt:
          type: string
          nullable: true
          maxLength: 300
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views_count:
          type: integer
          maximum: 2147483647
          minimum: 0
        categories:
          type: array
          items:
            type: integer
      required:
      - categories
      - comments_count
      - created_at
      - description
      - id
      - image
      - likes_count
      - slug
      - title
      - updated_at
    Profile:
      type: object
      properties:
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
    StatusEnum:
      enum:
      - draft
      - published
      - private
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
        * `private` - Private
    TokenObtainPair:
      type: object
      properties:
        phone:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - phone
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserRegister:
      type: object
      properties:
        password:
          type: string
          writeOnly: true
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        phone:
          type: string
          pattern: ^09\d{9}$
          maxLength: 11
        username:
          type: string
          maxLength: 100
        full_name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        bio:
          type: string
          nullable: true
        age:
          type: integer
          maximum: 100
          minimum: 1
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        author:
          type: boolean
        is_active:
          type: boolean
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - full_name
      - password
      - phone
      - username
    ValueEnum:
      enum:
      - like
      - dislike
      type: string
      description: |-
        * `like` - like
        * `dislike` - dislike
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
